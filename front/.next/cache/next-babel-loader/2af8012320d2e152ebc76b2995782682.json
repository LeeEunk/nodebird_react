{"ast":null,"code":"import shortId from 'shortid';\nimport { produce } from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  // 대문자로 시작하는 애들은 서버에서 주는 걸 의미\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '은경'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 너무 이뻐요~'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '재밌어요!'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts.concat(Array(20).fill().map((v, i) => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.Image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})));\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n// 동적 액션 트레이\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  // 더미데이터 id는 npm i shortid 활용해야 encounter 에러가 안남 -> id 정하기 애매할때 사용하기 좋음\n  // faker는 닉네임을 임의로 지정해줌 \n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'eunk'\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'eunk'\n  }\n});\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\n// immer를 사용할때 state는 절대 건들면 안되고 draft만 조작해야 함\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        // ...state,\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data)); // dummyPost를 앞에다가 추가해야 신규 게시물이 맨앞에서 보임\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex]};\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post; \n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","v","i","name","findName","lorem","paragraph","Image","image","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","post","find","postId"],"sources":["C:/Users/user/Downloads/react-nodebird/front/reducers/post.js"],"sourcesContent":["\r\nimport shortId from 'shortid';\r\nimport {produce} from 'immer';\r\nimport faker from 'faker';\r\n\r\n\r\nexport const initialState = {\r\n    // 대문자로 시작하는 애들은 서버에서 주는 걸 의미\r\n    mainPosts: [{\r\n        id:1,\r\n        User: {\r\n            id: 1,\r\n            nickname: '은경',\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Images: [{\r\n            id: shortId.generate(),\r\n            src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726',\r\n        },\r\n        {\r\n            id: shortId.generate(),\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\r\n        },\r\n        {\r\n            id: shortId.generate(),\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\r\n        }\r\n    ],\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'nero',\r\n            },\r\n            content: '우와 너무 이뻐요~',\r\n        },{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'hero',\r\n            },\r\n            content: '재밌어요!'\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n};\r\n\r\ninitialState.mainPosts.concat(\r\n    Array(20).fill().map((v, i) => ({\r\n        id: shortId.generate(),\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName()\r\n        },\r\n        content: faker.lorem.paragraph(),\r\n        Images: [{\r\n            src: faker.Image.image(),\r\n        }],\r\n        Comments: [{\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: faker.name.findName(),\r\n            },\r\n            content: faker.lorem.sentence(),\r\n        }],\r\n    }))\r\n);\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n// 동적 액션 트레이\r\nexport const addPost = (data)=> ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data)=> ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = (data) => ( {\r\n    // 더미데이터 id는 npm i shortid 활용해야 encounter 에러가 안남 -> id 정하기 애매할때 사용하기 좋음\r\n    // faker는 닉네임을 임의로 지정해줌 \r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id:1,\r\n        nickname: 'eunk',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id:1,\r\n        nickname: 'eunk',\r\n    },\r\n})\r\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\r\n// immer를 사용할때 state는 절대 건들면 안되고 draft만 조작해야 함\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n    \r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                    // ...state,\r\n                    draft.addPostLoading = true;\r\n                    draft.addPostDone = false;\r\n                    draft.addPostError = null;\r\n                    break;\r\n            case ADD_POST_SUCCESS:\r\n                    draft.mainPosts.unshift(dummyPost(action.data));// dummyPost를 앞에다가 추가해야 신규 게시물이 맨앞에서 보임\r\n                    draft.addPostLoading = false;\r\n                    draft.addPostDone = true;\r\n                    break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError =  action.error;\r\n                break;\r\n\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading =  true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading= false;\r\n                draft.removePostError= action.error;\r\n                break;\r\n\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone= false;\r\n                draft.addCommentError= null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex]};\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post; \r\n                draft.addCommentLoading= false;\r\n                draft.addCommentDone= true;\r\n                break;\r\n                \r\n            case ADD_COMMENT_FAILURE:    \r\n                draft.addCommentLoading= false;\r\n                draft.addCommentError= action.error;\r\n                break;\r\n    \r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n    \r\n};\r\n\r\nexport default reducer;"],"mappings":"AACA,OAAOA,OAAO,MAAM,SAAS;AAC7B,SAAQC,OAAO,QAAO,OAAO;AAC7B,OAAOC,KAAK,MAAM,OAAO;AAGzB,OAAO,MAAMC,YAAY,GAAG;EACxB;EACAC,SAAS,EAAE,CAAC;IACRC,EAAE,EAAC,CAAC;IACJC,IAAI,EAAE;MACFD,EAAE,EAAE,CAAC;MACLE,QAAQ,EAAE;IACd,CAAC;IACDC,OAAO,EAAE,uBAAuB;IAChCC,MAAM,EAAE,CAAC;MACLJ,EAAE,EAAEL,OAAO,CAACU,QAAQ,CAAC,CAAC;MACtBC,GAAG,EAAE;IACT,CAAC,EACD;MACIN,EAAE,EAAEL,OAAO,CAACU,QAAQ,CAAC,CAAC;MACtBC,GAAG,EAAE;IACT,CAAC,EACD;MACIN,EAAE,EAAEL,OAAO,CAACU,QAAQ,CAAC,CAAC;MACtBC,GAAG,EAAE;IACT,CAAC,CACJ;IACGC,QAAQ,EAAE,CAAC;MACPP,EAAE,EAAEL,OAAO,CAACU,QAAQ,CAAC,CAAC;MACtBJ,IAAI,EAAE;QACFD,EAAE,EAAEL,OAAO,CAACU,QAAQ,CAAC,CAAC;QACtBH,QAAQ,EAAE;MACd,CAAC;MACDC,OAAO,EAAE;IACb,CAAC,EAAC;MACEH,EAAE,EAAEL,OAAO,CAACU,QAAQ,CAAC,CAAC;MACtBJ,IAAI,EAAE;QACFD,EAAE,EAAEL,OAAO,CAACU,QAAQ,CAAC,CAAC;QACtBH,QAAQ,EAAE;MACd,CAAC;MACDC,OAAO,EAAE;IACb,CAAC;EACL,CAAC,CAAC;EACFK,UAAU,EAAE,EAAE;EACdC,cAAc,EAAE,KAAK;EACrBC,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE,IAAI;EAClBC,iBAAiB,EAAE,KAAK;EACxBC,cAAc,EAAE,KAAK;EACrBC,eAAe,EAAE,IAAI;EACrBC,iBAAiB,EAAE,KAAK;EACxBC,cAAc,EAAE,KAAK;EACrBC,eAAe,EAAE;AACrB,CAAC;AAEDnB,YAAY,CAACC,SAAS,CAACmB,MAAM,CACzBC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM;EAC5BvB,EAAE,EAAEL,OAAO,CAACU,QAAQ,CAAC,CAAC;EACtBJ,IAAI,EAAE;IACFD,EAAE,EAAEL,OAAO,CAACU,QAAQ,CAAC,CAAC;IACtBH,QAAQ,EAAEL,KAAK,CAAC2B,IAAI,CAACC,QAAQ,CAAC;EAClC,CAAC;EACDtB,OAAO,EAAEN,KAAK,CAAC6B,KAAK,CAACC,SAAS,CAAC,CAAC;EAChCvB,MAAM,EAAE,CAAC;IACLE,GAAG,EAAET,KAAK,CAAC+B,KAAK,CAACC,KAAK,CAAC;EAC3B,CAAC,CAAC;EACFtB,QAAQ,EAAE,CAAC;IACPN,IAAI,EAAE;MACFD,EAAE,EAAEL,OAAO,CAACU,QAAQ,CAAC,CAAC;MACtBH,QAAQ,EAAEL,KAAK,CAAC2B,IAAI,CAACC,QAAQ,CAAC;IAClC,CAAC;IACDtB,OAAO,EAAEN,KAAK,CAAC6B,KAAK,CAACI,QAAQ,CAAC;EAClC,CAAC;AACL,CAAC,CAAC,CACN,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAElD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AAExD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;;AAExD;AACA,OAAO,MAAMC,OAAO,GAAIC,IAAI,KAAK;EAC7BC,IAAI,EAAEX,gBAAgB;EACtBU;AACJ,CAAC,CAAC;AAEF,OAAO,MAAME,UAAU,GAAIF,IAAI,KAAK;EAChCC,IAAI,EAAEL,mBAAmB;EACzBI;AACJ,CAAC,CAAC;AAEF,MAAMG,SAAS,GAAIH,IAAI,KAAO;EAC1B;EACA;EACAzC,EAAE,EAAEyC,IAAI,CAACzC,EAAE;EACXG,OAAO,EAAEsC,IAAI,CAACtC,OAAO;EACrBF,IAAI,EAAE;IACFD,EAAE,EAAC,CAAC;IACJE,QAAQ,EAAE;EACd,CAAC;EACDE,MAAM,EAAE,EAAE;EACVG,QAAQ,EAAE;AACd,CAAC,CAAC;AAEF,MAAMsC,YAAY,GAAIJ,IAAI,KAAM;EAC5BzC,EAAE,EAAEL,OAAO,CAACU,QAAQ,CAAC,CAAC;EACtBF,OAAO,EAAEsC,IAAI;EACbxC,IAAI,EAAE;IACFD,EAAE,EAAC,CAAC;IACJE,QAAQ,EAAE;EACd;AACJ,CAAC,CAAC;AACF;AACA;AACA,MAAM4C,OAAO,GAAGA,CAACC,KAAK,GAAGjD,YAAY,EAAEkD,MAAM,KAAK;EAC9C,OAAOpD,OAAO,CAACmD,KAAK,EAAGE,KAAK,IAAK;IAE7B,QAAQD,MAAM,CAACN,IAAI;MACf,KAAKX,gBAAgB;QACb;QACAkB,KAAK,CAACxC,cAAc,GAAG,IAAI;QAC3BwC,KAAK,CAACvC,WAAW,GAAG,KAAK;QACzBuC,KAAK,CAACtC,YAAY,GAAG,IAAI;QACzB;MACR,KAAKqB,gBAAgB;QACbiB,KAAK,CAAClD,SAAS,CAACmD,OAAO,CAACN,SAAS,CAACI,MAAM,CAACP,IAAI,CAAC,CAAC,CAAC;QAChDQ,KAAK,CAACxC,cAAc,GAAG,KAAK;QAC5BwC,KAAK,CAACvC,WAAW,GAAG,IAAI;QACxB;MACR,KAAKuB,gBAAgB;QACjBgB,KAAK,CAACxC,cAAc,GAAG,KAAK;QAC5BwC,KAAK,CAACtC,YAAY,GAAIqC,MAAM,CAACG,KAAK;QAClC;MAEJ,KAAKjB,mBAAmB;QACpBe,KAAK,CAACrC,iBAAiB,GAAI,IAAI;QAC/BqC,KAAK,CAACpC,cAAc,GAAG,KAAK;QAC5BoC,KAAK,CAACnC,eAAe,GAAG,IAAI;QAC5B;MACJ,KAAKqB,mBAAmB;QACpBc,KAAK,CAAClD,SAAS,GAAGkD,KAAK,CAAClD,SAAS,CAACqD,MAAM,CAAE9B,CAAC,IAAKA,CAAC,CAACtB,EAAE,KAAKgD,MAAM,CAACP,IAAI,CAAC;QACrEQ,KAAK,CAACrC,iBAAiB,GAAG,KAAK;QAC/BqC,KAAK,CAACpC,cAAc,GAAG,IAAI;QAC3B;MACJ,KAAKuB,mBAAmB;QACpBa,KAAK,CAACrC,iBAAiB,GAAE,KAAK;QAC9BqC,KAAK,CAACnC,eAAe,GAAEkC,MAAM,CAACG,KAAK;QACnC;MAEJ,KAAKd,mBAAmB;QACpBY,KAAK,CAAClC,iBAAiB,GAAG,IAAI;QAC9BkC,KAAK,CAACjC,cAAc,GAAE,KAAK;QAC3BiC,KAAK,CAAChC,eAAe,GAAE,IAAI;QAC3B;MACJ,KAAKqB,mBAAmB;QACpB,MAAMe,IAAI,GAAGJ,KAAK,CAAClD,SAAS,CAACuD,IAAI,CAAEhC,CAAC,IAAKA,CAAC,CAACtB,EAAE,KAAKgD,MAAM,CAACP,IAAI,CAACc,MAAM,CAAC;QACrEF,IAAI,CAAC9C,QAAQ,CAAC2C,OAAO,CAACL,YAAY,CAACG,MAAM,CAACP,IAAI,CAACtC,OAAO,CAAC,CAAC;QACxD;QACA;QACA;QACA;QACA;QACA8C,KAAK,CAAClC,iBAAiB,GAAE,KAAK;QAC9BkC,KAAK,CAACjC,cAAc,GAAE,IAAI;QAC1B;MAEJ,KAAKuB,mBAAmB;QACpBU,KAAK,CAAClC,iBAAiB,GAAE,KAAK;QAC9BkC,KAAK,CAAChC,eAAe,GAAE+B,MAAM,CAACG,KAAK;QACnC;MAEJ;QACI;IACR;EACJ,CAAC,CAAC;AAGN,CAAC;AAED,eAAeL,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport shortId from 'shortid';\nexport const initialState = {\n  // 대문자로 시작하는 애들은 서버에서 주는 걸 의미\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '은경'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 너무 이뻐요~'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '재밌어요!'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n// 동적 액션 트레이\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  // 더미데이터 id는 npm i shortid 활용해야 encounter 에러가 안남 -> id 정하기 애매할때 사용하기 좋음\n  // faker는 닉네임을 임의로 지정해줌 \n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'eunk'\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'eunk'\n  }\n});\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        // dummyPost를 앞에다가 추가해야 신규 게시물이 맨앞에서 보임\n        addPostLoading: false,\n        addPostDone: true\n      });\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","_objectSpread","error","postIndex","findIndex","v","postId","post"],"sources":["C:/Users/user/Downloads/react-nodebird/front/reducers/post.js"],"sourcesContent":["\r\nimport shortId from 'shortid';\r\n\r\nexport const initialState = {\r\n    // 대문자로 시작하는 애들은 서버에서 주는 걸 의미\r\n    mainPosts: [{\r\n        id:1,\r\n        User: {\r\n            id: 1,\r\n            nickname: '은경',\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Images: [{\r\n            id: shortId.generate(),\r\n            src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?update=20180726',\r\n        },\r\n        {\r\n            src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\r\n        },\r\n        {\r\n             src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\r\n        }\r\n    ],\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'nero',\r\n            },\r\n            content: '우와 너무 이뻐요~',\r\n        },{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'hero',\r\n            },\r\n            content: '재밌어요!'\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n}\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n// 동적 액션 트레이\r\nexport const addPost = (data)=> ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data)=> ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = (data) => ( {\r\n    // 더미데이터 id는 npm i shortid 활용해야 encounter 에러가 안남 -> id 정하기 애매할때 사용하기 좋음\r\n    // faker는 닉네임을 임의로 지정해줌 \r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id:1,\r\n        nickname: 'eunk',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id:1,\r\n        nickname: 'eunk',\r\n    },\r\n})\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            }\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],// dummyPost를 앞에다가 추가해야 신규 게시물이 맨앞에서 보임\r\n                addPostLoading: false,\r\n                addPostDone: true,\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error,\r\n\r\n            }\r\n\r\n        case ADD_COMMENT_REQUEST:\r\n                return {\r\n                    ...state,\r\n                    addCommentLoading: true,\r\n                    addCommentDone: false,\r\n                    addCommentError: null,\r\n                }\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            const post = { ...state.mainPosts[postIndex]};\r\n            post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = post;\r\n                return {\r\n                    ...state,\r\n                    mainPosts,\r\n                    addCommentLoading: false,\r\n                    addCommentDone: true,\r\n                };\r\n            }\r\n        case ADD_COMMENT_FAILURE:\r\n                return {\r\n                    ...state,\r\n                    addCommentLoading: false,\r\n                    addCommentError: action.error,\r\n    \r\n                };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
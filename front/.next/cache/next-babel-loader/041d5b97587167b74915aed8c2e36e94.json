{"ast":null,"code":"import shortId from 'shortid';\nimport { produce } from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  // 대문자로 시작하는 애들은 서버에서 주는 걸 의미\n  mainPosts: [],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(20).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n// 동적 액션 트레이\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    // 더미데이터 id는 npm i shortid 활용해야 encounter 에러가 안남 -> id 정하기 애매할때 사용하기 좋음\n    // faker는 닉네임을 임의로 지정해줌 \n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: 'eunk'\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: 'eunk'\n    }\n  };\n};\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\n// immer를 사용할때 state는 절대 건들면 안되고 draft만 조작해야 함\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        // ...state,\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data)); // dummyPost를 앞에다가 추가해야 신규 게시물이 맨앞에서 보임\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.postId;\n        });\n        post.Comments.unshift(dummyComment(action.data.content));\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex]};\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post; \n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","arguments","length","undefined","action","draft","unshift","error","filter","v","post","find","postId"],"sources":["C:/Users/user/Downloads/react-nodebird/front/reducers/post.js"],"sourcesContent":["\r\nimport shortId from 'shortid';\r\nimport {produce} from 'immer';\r\nimport faker from 'faker';\r\n\r\n\r\nexport const initialState = {\r\n    // 대문자로 시작하는 애들은 서버에서 주는 걸 의미\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(20).fill().map(() => ({\r\n    id: shortId.generate(),\r\n    User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName()\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\n    \r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n// 동적 액션 트레이\r\nexport const addPost = (data)=> ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data)=> ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = (data) => ( {\r\n    // 더미데이터 id는 npm i shortid 활용해야 encounter 에러가 안남 -> id 정하기 애매할때 사용하기 좋음\r\n    // faker는 닉네임을 임의로 지정해줌 \r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id:1,\r\n        nickname: 'eunk',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id:1,\r\n        nickname: 'eunk',\r\n    },\r\n})\r\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성을 지키면서)\r\n// immer를 사용할때 state는 절대 건들면 안되고 draft만 조작해야 함\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n    \r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                    // ...state,\r\n                    draft.addPostLoading = true;\r\n                    draft.addPostDone = false;\r\n                    draft.addPostError = null;\r\n                    break;\r\n            case ADD_POST_SUCCESS:\r\n                    draft.mainPosts.unshift(dummyPost(action.data));// dummyPost를 앞에다가 추가해야 신규 게시물이 맨앞에서 보임\r\n                    draft.addPostLoading = false;\r\n                    draft.addPostDone = true;\r\n                    break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError =  action.error;\r\n                break;\r\n\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading =  true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading= false;\r\n                draft.removePostError= action.error;\r\n                break;\r\n\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone= false;\r\n                draft.addCommentError= null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex]};\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post; \r\n                draft.addCommentLoading= false;\r\n                draft.addCommentDone= true;\r\n                break;\r\n                \r\n            case ADD_COMMENT_FAILURE:    \r\n                draft.addCommentLoading= false;\r\n                draft.addCommentError= action.error;\r\n                break;\r\n    \r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n    \r\n};\r\n\r\nexport default reducer;"],"mappings":"AACA,OAAOA,OAAO,MAAM,SAAS;AAC7B,SAAQC,OAAO,QAAO,OAAO;AAC7B,OAAOC,KAAK,MAAM,OAAO;AAGzB,OAAO,IAAMC,YAAY,GAAG;EACxB;EACAC,SAAS,EAAE,EAAE;EACbC,UAAU,EAAE,EAAE;EACdC,cAAc,EAAE,KAAK;EACrBC,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE,IAAI;EAClBC,iBAAiB,EAAE,KAAK;EACxBC,cAAc,EAAE,KAAK;EACrBC,eAAe,EAAE,IAAI;EACrBC,iBAAiB,EAAE,KAAK;EACxBC,cAAc,EAAE,KAAK;EACrBC,eAAe,EAAE;AACrB,CAAC;AAED,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,MAAM;EAAA,OAAKC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC;IAAA,OAAO;MACrEC,EAAE,EAAEpB,OAAO,CAACqB,QAAQ,CAAC,CAAC;MACtBC,IAAI,EAAE;QACFF,EAAE,EAAEpB,OAAO,CAACqB,QAAQ,CAAC,CAAC;QACtBE,QAAQ,EAAErB,KAAK,CAACsB,IAAI,CAACC,QAAQ,CAAC;MAClC,CAAC;MACDC,OAAO,EAAExB,KAAK,CAACyB,KAAK,CAACC,SAAS,CAAC,CAAC;MAChCC,MAAM,EAAE,CAAC;QACLC,GAAG,EAAE5B,KAAK,CAAC6B,KAAK,CAACA,KAAK,CAAC;MAC3B,CAAC,CAAC;MACFC,QAAQ,EAAE,CAAC;QACPV,IAAI,EAAE;UACFF,EAAE,EAAEpB,OAAO,CAACqB,QAAQ,CAAC,CAAC;UACtBE,QAAQ,EAAErB,KAAK,CAACsB,IAAI,CAACC,QAAQ,CAAC;QAClC,CAAC;QACDC,OAAO,EAAExB,KAAK,CAACyB,KAAK,CAACM,QAAQ,CAAC;MAClC,CAAC;IACL,CAAC;EAAA,CAAC,CAAC;AAAA;AAIH,OAAO,IAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,IAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,IAAMC,gBAAgB,GAAG,kBAAkB;AAElD,OAAO,IAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,IAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,IAAMC,mBAAmB,GAAG,qBAAqB;AAExD,OAAO,IAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,IAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,IAAMC,mBAAmB,GAAG,qBAAqB;;AAExD;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAIC,IAAI;EAAA,OAAK;IAC7BC,IAAI,EAAEX,gBAAgB;IACtBU,IAAI,EAAJA;EACJ,CAAC;AAAA,CAAC;AAEF,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAUA,CAAIF,IAAI;EAAA,OAAK;IAChCC,IAAI,EAAEL,mBAAmB;IACzBI,IAAI,EAAJA;EACJ,CAAC;AAAA,CAAC;AAEF,IAAMG,SAAS,GAAG,SAAZA,SAASA,CAAIH,IAAI;EAAA,OAAO;IAC1B;IACA;IACAxB,EAAE,EAAEwB,IAAI,CAACxB,EAAE;IACXM,OAAO,EAAEkB,IAAI,CAAClB,OAAO;IACrBJ,IAAI,EAAE;MACFF,EAAE,EAAC,CAAC;MACJG,QAAQ,EAAE;IACd,CAAC;IACDM,MAAM,EAAE,EAAE;IACVG,QAAQ,EAAE;EACd,CAAC;AAAA,CAAC;AAEF,IAAMgB,YAAY,GAAG,SAAfA,YAAYA,CAAIJ,IAAI;EAAA,OAAM;IAC5BxB,EAAE,EAAEpB,OAAO,CAACqB,QAAQ,CAAC,CAAC;IACtBK,OAAO,EAAEkB,IAAI;IACbtB,IAAI,EAAE;MACFF,EAAE,EAAC,CAAC;MACJG,QAAQ,EAAE;IACd;EACJ,CAAC;AAAA,CAAC;AACF;AACA;AACA,IAAM0B,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAqC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGhD,YAAY;EAAA,IAAEmD,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACzC,OAAOpD,OAAO,CAACiD,KAAK,EAAE,UAACK,KAAK,EAAK;IAE7B,QAAQD,MAAM,CAACT,IAAI;MACf,KAAKX,gBAAgB;QACb;QACAqB,KAAK,CAACjD,cAAc,GAAG,IAAI;QAC3BiD,KAAK,CAAChD,WAAW,GAAG,KAAK;QACzBgD,KAAK,CAAC/C,YAAY,GAAG,IAAI;QACzB;MACR,KAAK2B,gBAAgB;QACboB,KAAK,CAACnD,SAAS,CAACoD,OAAO,CAACT,SAAS,CAACO,MAAM,CAACV,IAAI,CAAC,CAAC,CAAC;QAChDW,KAAK,CAACjD,cAAc,GAAG,KAAK;QAC5BiD,KAAK,CAAChD,WAAW,GAAG,IAAI;QACxB;MACR,KAAK6B,gBAAgB;QACjBmB,KAAK,CAACjD,cAAc,GAAG,KAAK;QAC5BiD,KAAK,CAAC/C,YAAY,GAAI8C,MAAM,CAACG,KAAK;QAClC;MAEJ,KAAKpB,mBAAmB;QACpBkB,KAAK,CAAC9C,iBAAiB,GAAI,IAAI;QAC/B8C,KAAK,CAAC7C,cAAc,GAAG,KAAK;QAC5B6C,KAAK,CAAC5C,eAAe,GAAG,IAAI;QAC5B;MACJ,KAAK2B,mBAAmB;QACpBiB,KAAK,CAACnD,SAAS,GAAGmD,KAAK,CAACnD,SAAS,CAACsD,MAAM,CAAC,UAACC,CAAC;UAAA,OAAKA,CAAC,CAACvC,EAAE,KAAKkC,MAAM,CAACV,IAAI;QAAA,EAAC;QACrEW,KAAK,CAAC9C,iBAAiB,GAAG,KAAK;QAC/B8C,KAAK,CAAC7C,cAAc,GAAG,IAAI;QAC3B;MACJ,KAAK6B,mBAAmB;QACpBgB,KAAK,CAAC9C,iBAAiB,GAAE,KAAK;QAC9B8C,KAAK,CAAC5C,eAAe,GAAE2C,MAAM,CAACG,KAAK;QACnC;MAEJ,KAAKjB,mBAAmB;QACpBe,KAAK,CAAC3C,iBAAiB,GAAG,IAAI;QAC9B2C,KAAK,CAAC1C,cAAc,GAAE,KAAK;QAC3B0C,KAAK,CAACzC,eAAe,GAAE,IAAI;QAC3B;MACJ,KAAK2B,mBAAmB;QACpB,IAAMmB,IAAI,GAAGL,KAAK,CAACnD,SAAS,CAACyD,IAAI,CAAC,UAACF,CAAC;UAAA,OAAKA,CAAC,CAACvC,EAAE,KAAKkC,MAAM,CAACV,IAAI,CAACkB,MAAM;QAAA,EAAC;QACrEF,IAAI,CAAC5B,QAAQ,CAACwB,OAAO,CAACR,YAAY,CAACM,MAAM,CAACV,IAAI,CAAClB,OAAO,CAAC,CAAC;QACxD;QACA;QACA;QACA;QACA;QACA6B,KAAK,CAAC3C,iBAAiB,GAAE,KAAK;QAC9B2C,KAAK,CAAC1C,cAAc,GAAE,IAAI;QAC1B;MAEJ,KAAK6B,mBAAmB;QACpBa,KAAK,CAAC3C,iBAAiB,GAAE,KAAK;QAC9B2C,KAAK,CAACzC,eAAe,GAAEwC,MAAM,CAACG,KAAK;QACnC;MAEJ;QACI;IACR;EACJ,CAAC,CAAC;AAGN,CAAC;AAED,eAAeR,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}
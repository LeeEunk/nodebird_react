{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { HYDRATE } from 'next-redux-wrapper';\n\n// reducer는 스위치문이 들어있는 함수임\n// reducer 쪼개는 기준\nconst initialState = {\n  user: {},\n  post: {}\n};\n\n// 기본 state를 변경하고 싶을때, 늘 액션을 만들어서 히스토리를 유지하곤 변경 진행하기\n\n// const changeNickname = {\n//     type: 'CHANGE_NICKNAME',\n//     data : 'dooyoo',\n// }   \n\n// 액션을 만들어주는 함수를 만들기 (이름만 여러번 변경하고 싶을때 새로 계속 객체를 생성해야 하는게 낭비이므로)\n// 동적으로 생성\n// action creator\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n};\n//changeNickname('dooyoo')\n// store.dispatch(changeNickname('member kyung'))\n\n// (이전상태, 액션) => 다음상태\nconst rootReducer = (state = initialState, action) => {\n  // action은 객체임\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n    case 'LOG_IN':\n      // 다음 스테이트로 값이 변경, initial state와는 다른 객체가 생김\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n    // 초기화\n    default:\n      return state;\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","initialState","user","post","changeNickname","data","type","rootReducer","state","action","console","log","_objectSpread","payload","isLoggedIn"],"sources":["C:/Users/user/Downloads/react-nodebird/front/reducers/index.js"],"sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\n\r\n// reducer는 스위치문이 들어있는 함수임\r\n// reducer 쪼개는 기준\r\nconst initialState = {\r\n    user: {\r\n        \r\n    },\r\n    post: {\r\n        \r\n   }\r\n}\r\n\r\n\r\n// 기본 state를 변경하고 싶을때, 늘 액션을 만들어서 히스토리를 유지하곤 변경 진행하기\r\n\r\n// const changeNickname = {\r\n//     type: 'CHANGE_NICKNAME',\r\n//     data : 'dooyoo',\r\n// }   \r\n\r\n// 액션을 만들어주는 함수를 만들기 (이름만 여러번 변경하고 싶을때 새로 계속 객체를 생성해야 하는게 낭비이므로)\r\n// 동적으로 생성\r\n// action creator\r\nconst changeNickname = (data) => {\r\n    return {\r\n        type : 'CHANGE_NICKNAME',\r\n        data,\r\n    }\r\n};\r\n//changeNickname('dooyoo')\r\n// store.dispatch(changeNickname('member kyung'))\r\n\r\n\r\n// (이전상태, 액션) => 다음상태\r\nconst rootReducer = (state = initialState, action) => {\r\n    // action은 객체임\r\n    switch(action.type) {\r\n        case HYDRATE:\r\n            console.log('HYDRATE', action);\r\n            return { ...state, ...action.payload };\r\n\r\n        case 'LOG_IN' : \r\n            // 다음 스테이트로 값이 변경, initial state와는 다른 객체가 생김\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user,\r\n                    isLoggedIn: true,\r\n                    user: action.data,\r\n                },\r\n            };\r\n        \r\n        case 'LOG_OUT' : \r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user,\r\n                    isLoggedIn: false,\r\n                    user: null,\r\n                },\r\n            };\r\n        // 초기화\r\n        default: \r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;"],"mappings":";;;;;AAAA,SAASA,OAAO,QAAQ,oBAAoB;;AAE5C;AACA;AACA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,CAEN,CAAC;EACDC,IAAI,EAAE,CAEP;AACH,CAAC;;AAGD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,cAAc,GAAIC,IAAI,IAAK;EAC7B,OAAO;IACHC,IAAI,EAAG,iBAAiB;IACxBD;EACJ,CAAC;AACL,CAAC;AACD;AACA;;AAGA;AACA,MAAME,WAAW,GAAGA,CAACC,KAAK,GAAGP,YAAY,EAAEQ,MAAM,KAAK;EAClD;EACA,QAAOA,MAAM,CAACH,IAAI;IACd,KAAKN,OAAO;MACRU,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,MAAM,CAAC;MAC9B,OAAAG,aAAA,CAAAA,aAAA,KAAYJ,KAAK,GAAKC,MAAM,CAACI,OAAO;IAExC,KAAK,QAAQ;MACT;MACA,OAAAD,aAAA,CAAAA,aAAA,KACOJ,KAAK;QACRN,IAAI,EAAAU,aAAA,CAAAA,aAAA,KACGJ,KAAK,CAACN,IAAI;UACbY,UAAU,EAAE,IAAI;UAChBZ,IAAI,EAAEO,MAAM,CAACJ;QAAI;MACpB;IAGT,KAAK,SAAS;MACV,OAAAO,aAAA,CAAAA,aAAA,KACOJ,KAAK;QACRN,IAAI,EAAAU,aAAA,CAAAA,aAAA,KACGJ,KAAK,CAACN,IAAI;UACbY,UAAU,EAAE,KAAK;UACjBZ,IAAI,EAAE;QAAI;MACb;IAET;IACA;MACI,OAAOM,KAAK;EACpB;AACJ,CAAC;AAED,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}
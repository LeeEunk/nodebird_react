{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\nfunction loadPostsAPI(data) {\n  //generate X\n  return axios.get('/posts', data);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      //put은 action을 dispatch\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  //generate X\n  return axios.post('/post', {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data); // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \n    // yield가 await과 비슷 blocking\n    // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\n\n    // yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      //put은 action을 dispatch\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      //put은 action을 dispatch\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  //generate X\n  return axios.delete('/api/post', data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \n    // yield가 await과 비슷 blocking\n    // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\n\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      //put은 action을 dispatch\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      //put은 action을 dispatch\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  //generate X\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    // yield delay(1000);\n    yield put({\n      //put은 action을 dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n// takeLatest는 클릭 실수로 2번 했을 때 혹은 100번을 눌러도 마지막꺼만 실행함 \n//-> 동시에 로딩된거만 취소됨(단, 프론터서버에서만 적용, 그래서 백엔드에서 2번 저장되지 않았는지 체크 필요)\n// 요청은 2번간거고 응답만 마지막꺼 한개로 받음, 요청은 취소가 안됨\n// 만약 첫번째꺼만 하고 싶으면 takeLeading도 있음\nfunction* watchLoadPosts() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","all","call","delay","fork","put","takeLatest","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","loadPostsAPI","data","get","loadPosts","action","result","type","err","response","addPostAPI","post","content","addPost","id","generate","removePostAPI","delete","removePost","console","error","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/user/Desktop/nodebird_react/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { all, call, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\r\nimport { \r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n     ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, \r\n     generateDummyPost, \r\n     LOAD_POSTS_FAILURE, \r\n     LOAD_POSTS_REQUEST, \r\n     LOAD_POSTS_SUCCESS, \r\n     REMOVE_POST_FAILURE, \r\n     REMOVE_POST_REQUEST,\r\n     REMOVE_POST_SUCCESS} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport shortId from \"shortid\";\r\n\r\nfunction loadPostsAPI(data) { //generate X\r\n    return axios.get('/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.data) \r\n        yield put({ //put은 action을 dispatch\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) { //generate X\r\n    return axios.post('/post', {content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \r\n        // yield가 await과 비슷 blocking\r\n        // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\r\n\r\n        // yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({ //put은 action을 dispatch\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({ //put은 action을 dispatch\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) { //generate X\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(removePostAPI, action.data) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \r\n        // yield가 await과 비슷 blocking\r\n        // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\r\n\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({ //put은 action을 dispatch\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({ //put은 action을 dispatch\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) { //generate X\r\n    return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        // yield delay(1000);\r\n        yield put({ //put은 action을 dispatch\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n// takeLatest는 클릭 실수로 2번 했을 때 혹은 100번을 눌러도 마지막꺼만 실행함 \r\n//-> 동시에 로딩된거만 취소됨(단, 프론터서버에서만 적용, 그래서 백엔드에서 2번 저장되지 않았는지 체크 필요)\r\n// 요청은 2번간거고 응답만 마지막꺼 한개로 받음, 요청은 취소가 안됨\r\n// 만약 첫번째꺼만 하고 싶으면 takeLeading도 있음\r\nfunction* watchLoadPosts() {\r\n    yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n        yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,oBAAoB;AACtF,SACIC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAC5DC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,EACpDC,iBAAiB,EACjBC,kBAAkB,EAClBC,kBAAkB,EAClBC,kBAAkB,EAClBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,QAAO,kBAAkB;AACjD,SAASC,cAAc,EAAEC,iBAAiB,QAAQ,kBAAkB;AACpE,OAAOC,OAAO,MAAM,SAAS;AAE7B,SAASC,YAAYA,CAACC,IAAI,EAAE;EAAE;EAC1B,OAAOzB,KAAK,CAAC0B,GAAG,CAAC,QAAQ,EAAED,IAAI,CAAC;AACpC;AAEA,UAAUE,SAASA,CAACC,MAAM,EAAE;EACxB,IAAI;IACA,MAAMC,MAAM,GAAG,MAAM3B,IAAI,CAACsB,YAAY,EAAEI,MAAM,CAACH,IAAI,CAAC;IACpD,MAAMpB,GAAG,CAAC;MAAE;MACRyB,IAAI,EAAEb,kBAAkB;MACxBQ,IAAI,EAAEI,MAAM,CAACJ;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOM,GAAG,EAAE;IACV,MAAM1B,GAAG,CAAC;MACNyB,IAAI,EAAEf,kBAAkB;MACxBU,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASQ,UAAUA,CAACR,IAAI,EAAE;EAAE;EACxB,OAAOzB,KAAK,CAACkC,IAAI,CAAC,OAAO,EAAE;IAACC,OAAO,EAAEV;EAAK,CAAC,CAAC;AAChD;AAEA,UAAUW,OAAOA,CAACR,MAAM,EAAE;EACtB,IAAI;IACA,MAAMC,MAAM,GAAG,MAAM3B,IAAI,CAAC+B,UAAU,EAAEL,MAAM,CAACH,IAAI,CAAC,EAAC;IACnD;IACA;;IAEA;IACA,MAAMY,EAAE,GAAGd,OAAO,CAACe,QAAQ,CAAC,CAAC;IAC7B,MAAMjC,GAAG,CAAC;MAAE;MACRyB,IAAI,EAAEjB,gBAAgB;MACtBY,IAAI,EAAEI,MAAM,CAACJ;IACjB,CAAC,CAAC;IACF,MAAMpB,GAAG,CAAC;MAAE;MACRyB,IAAI,EAAET,cAAc;MACpBI,IAAI,EAAEI,MAAM,CAACJ,IAAI,CAACY;IACtB,CAAC,CAAC;EACN,CAAC,CAAC,OAAON,GAAG,EAAE;IACV,MAAM1B,GAAG,CAAC;MACNyB,IAAI,EAAEnB,gBAAgB;MACtBc,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASc,aAAaA,CAACd,IAAI,EAAE;EAAE;EAC3B,OAAOzB,KAAK,CAACwC,MAAM,CAAC,WAAW,EAAEf,IAAI,CAAC;AAC1C;AAEA,UAAUgB,UAAUA,CAACb,MAAM,EAAE;EACzB,IAAI;IACA;IACA;IACA;;IAEA,MAAMzB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMkC,EAAE,GAAGd,OAAO,CAACe,QAAQ,CAAC,CAAC;IAC7B,MAAMjC,GAAG,CAAC;MAAE;MACRyB,IAAI,EAAEV,mBAAmB;MACzBK,IAAI,EAAEG,MAAM,CAACH;IACjB,CAAC,CAAC;IACF,MAAMpB,GAAG,CAAC;MAAE;MACRyB,IAAI,EAAER,iBAAiB;MACvBG,IAAI,EAAEG,MAAM,CAACH;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOM,GAAG,EAAE;IACVW,OAAO,CAACC,KAAK,CAACZ,GAAG,CAAC;IAClB,MAAM1B,GAAG,CAAC;MACNyB,IAAI,EAAEZ,mBAAmB;MACzBO,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASmB,aAAaA,CAACnB,IAAI,EAAE;EAAE;EAC3B,OAAOzB,KAAK,CAACkC,IAAI,CAAC,SAAST,IAAI,CAACoB,MAAM,UAAU,EAAEpB,IAAI,CAAC,CAAC,CAAC;AAC7D;AAEA,UAAUqB,UAAUA,CAAClB,MAAM,EAAE;EACzB,IAAI;IACA,MAAMC,MAAM,GAAG,MAAM3B,IAAI,CAAC0C,aAAa,EAAEhB,MAAM,CAACH,IAAI,CAAC;IACrD;IACA,MAAMpB,GAAG,CAAC;MAAE;MACRyB,IAAI,EAAEpB,mBAAmB;MACzBe,IAAI,EAAEI,MAAM,CAACJ;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOM,GAAG,EAAE;IACV,MAAM1B,GAAG,CAAC;MACNyB,IAAI,EAAEtB,mBAAmB;MACzBmC,KAAK,EAAEZ,GAAG,CAACC,QAAQ,CAACP;IACxB,CAAC,CAAC;EACN;AACJ;;AAIA;AACA;AACA;AACA;AACA,UAAUsB,cAAcA,CAAA,EAAG;EACvB,MAAMxC,QAAQ,CAAC,IAAI,EAAES,kBAAkB,EAAEW,SAAS,CAAC;AACvD;AAEA,UAAUqB,YAAYA,CAAA,EAAG;EACjB,MAAM1C,UAAU,CAACM,gBAAgB,EAAEwB,OAAO,CAAC;AACnD;AAEA,UAAUa,eAAeA,CAAA,EAAG;EACxB,MAAM3C,UAAU,CAACa,mBAAmB,EAAEsB,UAAU,CAAC;AACrD;AAEA,UAAUS,eAAeA,CAAA,EAAG;EACxB,MAAM5C,UAAU,CAACG,mBAAmB,EAAEqC,UAAU,CAAC;AACrD;AAGA,eAAe,UAAUK,QAAQA,CAAA,EAAG;EAChC,MAAMlD,GAAG,CAAC,CACNG,IAAI,CAAC4C,YAAY,CAAC,EAClB5C,IAAI,CAAC2C,cAAc,CAAC,EACpB3C,IAAI,CAAC6C,eAAe,CAAC,EACrB7C,IAAI,CAAC8C,eAAe,CAAC,CACxB,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module"}
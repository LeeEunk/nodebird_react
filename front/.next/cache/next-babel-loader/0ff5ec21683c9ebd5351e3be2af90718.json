{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, delay, fork, put, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport { FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from \"../reducers/user\";\nfunction logInAPI(data) {\n  //generate X\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/login', data);\n}\n\n// saga 명령어를 쓰는 이유 -> 테스트하기 좋음\nfunction* logIn(action) {\n  try {\n    // 함수, 매개변수들\n    const result = yield call(logInAPI, action.data); // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \n    // yield가 await과 비슷 blocking\n    // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\n\n    console.log(\"saga login\");\n    // yield delay(1000);\n    yield put({\n      //put은 action을 dispatch\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  //generate X\n  return axios.post('/user/logout');\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \n    // yield가 await과 비슷 blocking\n    // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\n\n    yield delay(1000);\n    yield put({\n      //put은 action을 dispatch\n      type: LOG_OUT_SUCCESS\n      // data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    // yield delay(1000);\n    yield put({\n      //put은 action을 dispatch\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.err(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction followAPI() {\n  return axios.post('/api/follow');\n}\nfunction* follow(action) {\n  try {\n    // const result = yield call(followAPI)\n    yield delay(1000);\n    yield put({\n      //put은 action을 dispatch\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.err(err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction unfollowAPI() {\n  return axios.post('/api/unfollow');\n}\nfunction* unfollow(action) {\n  try {\n    // const result = yield call(unfollowAPI)\n    yield delay(1000);\n    yield put({\n      //put은 action을 dispatch\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.err(err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n//이벤트 리스너들 잔뜩 만들어줌\n// yield 특징 일회용임 -> 한번만 사용할 수 있음 -> 그래서 while 반복문을 활용함 -> 무한루프로 안빠짐 한번만 실행하기 때문\n// while 대신에 take는 동기적으로 동작, takeEvery는 비동기적으로 동작\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\nfunction* watchUnfollow() {\n  yield takeEvery(UNFOLLOW_REQUEST, unfollow);\n}\nfunction* watchLogIn() {\n  // throttle -> 2초 안에 여러번해도 무응답, 2초 안에 한번만 적용 \n  yield takeLatest(LOG_IN_REQUEST, logIn); //take: LOG_IN액션이 실행될때까지 기다림\n}\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"names":["axios","all","call","delay","fork","put","takeEvery","takeLatest","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","logInAPI","data","post","logIn","action","result","console","log","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","followAPI","follow","unfollowAPI","unfollow","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"sources":["C:/Users/user/Downloads/react-nodebird/front/sagas/user.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { all, call, delay, fork, put, takeEvery, takeLatest } from \"redux-saga/effects\";\r\nimport { \r\n    FOLLOW_FAILURE,\r\n    FOLLOW_REQUEST,\r\n    FOLLOW_SUCCESS,\r\n    LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, \r\n    LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, \r\n    SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, \r\n    UNFOLLOW_FAILURE, \r\n    UNFOLLOW_REQUEST,\r\n    UNFOLLOW_SUCCESS} from \"../reducers/user\";\r\n\r\nfunction logInAPI(data) { //generate X\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/login', data);\r\n}\r\n\r\n// saga 명령어를 쓰는 이유 -> 테스트하기 좋음\r\nfunction* logIn(action) {\r\n    try {// 함수, 매개변수들\r\n        const result = yield call(logInAPI, action.data) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \r\n        // yield가 await과 비슷 blocking\r\n        // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\r\n\r\n        console.log(\"saga login\");\r\n        // yield delay(1000);\r\n        yield put({ //put은 action을 dispatch\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI() { //generate X\r\n    return axios.post('/user/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \r\n        // yield가 await과 비슷 blocking\r\n        // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\r\n\r\n        yield delay(1000);\r\n        yield put({ //put은 action을 dispatch\r\n            type: LOG_OUT_SUCCESS,\r\n            // data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data){\r\n    return axios.post('/user', data)\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try{\r\n        const result = yield call(signUpAPI, action.data);\r\n        console.log(result);\r\n        // yield delay(1000);\r\n        yield put({ //put은 action을 dispatch\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        console.err(err);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction followAPI(){\r\n    return axios.post('/api/follow')\r\n}\r\n\r\nfunction* follow(action) {\r\n    try{\r\n        // const result = yield call(followAPI)\r\n        yield delay(1000);\r\n        yield put({ //put은 action을 dispatch\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.err(err);\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction unfollowAPI(){\r\n    return axios.post('/api/unfollow')\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try{\r\n        // const result = yield call(unfollowAPI)\r\n        yield delay(1000);\r\n        yield put({ //put은 action을 dispatch\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.err(err);\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//이벤트 리스너들 잔뜩 만들어줌\r\n// yield 특징 일회용임 -> 한번만 사용할 수 있음 -> 그래서 while 반복문을 활용함 -> 무한루프로 안빠짐 한번만 실행하기 때문\r\n// while 대신에 take는 동기적으로 동작, takeEvery는 비동기적으로 동작\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow); \r\n}\r\n\r\nfunction* watchUnfollow() {\r\n    yield takeEvery(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    // throttle -> 2초 안에 여러번해도 무응답, 2초 안에 한번만 적용 \r\n    yield takeLatest(LOG_IN_REQUEST, logIn); //take: LOG_IN액션이 실행될때까지 기다림\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
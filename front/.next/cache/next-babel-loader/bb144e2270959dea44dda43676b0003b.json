{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\nfunction loadPostsAPI(data) {\n  //generate X\n  return axios.get('/api/posts', data);\n}\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \n    // yield가 await과 비슷 blocking\n    // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\n\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      //put은 action을 dispatch\n      type: LOAD_POSTS_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE\n      // data: err.response.data,\n    });\n  }\n}\nfunction addPostAPI(data) {\n  //generate X\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \n    // yield가 await과 비슷 blocking\n    // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\n\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      //put은 action을 dispatch\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      //put은 action을 dispatch\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE\n      // data: err.response.data,\n    });\n  }\n}\nfunction removePostAPI(data) {\n  //generate X\n  return axios.delete('/api/post', data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \n    // yield가 await과 비슷 blocking\n    // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\n\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      //put은 action을 dispatch\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      //put은 action을 dispatch\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  //generate X\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      //put은 action을 dispatch\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n// takeLatest는 클릭 실수로 2번 했을 때 혹은 100번을 눌러도 마지막꺼만 실행함 \n//-> 동시에 로딩된거만 취소됨(단, 프론터서버에서만 적용, 그래서 백엔드에서 2번 저장되지 않았는지 체크 필요)\n// 요청은 2번간거고 응답만 마지막꺼 한개로 받음, 요청은 취소가 안됨\n// 만약 첫번째꺼만 하고 싶으면 takeLeading도 있음\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","all","delay","fork","put","takeLatest","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","loadPostsAPI","data","get","loadPosts","action","id","generate","type","LOAD_POSTS_SUCCESS","content","err","LOAD_POSTS_FAILURE","addPostAPI","post","addPost","removePostAPI","delete","removePost","console","error","response","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/user/Downloads/react-nodebird/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport { \r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n     ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, \r\n     LOAD_POSTS_REQUEST, \r\n     REMOVE_POST_FAILURE, \r\n     REMOVE_POST_REQUEST,\r\n     REMOVE_POST_SUCCESS} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport shortId from \"shortid\";\r\n\r\nfunction loadPostsAPI(data) { //generate X\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \r\n        // yield가 await과 비슷 blocking\r\n        // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\r\n\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({ //put은 action을 dispatch\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            }\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            // data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) { //generate X\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \r\n        // yield가 await과 비슷 blocking\r\n        // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\r\n\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({ //put은 action을 dispatch\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            }\r\n        });\r\n        yield put({ //put은 action을 dispatch\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            // data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) { //generate X\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(removePostAPI, action.data) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \r\n        // yield가 await과 비슷 blocking\r\n        // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\r\n\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({ //put은 action을 dispatch\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({ //put은 action을 dispatch\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) { //generate X\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({ //put은 action을 dispatch\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n// takeLatest는 클릭 실수로 2번 했을 때 혹은 100번을 눌러도 마지막꺼만 실행함 \r\n//-> 동시에 로딩된거만 취소됨(단, 프론터서버에서만 적용, 그래서 백엔드에서 2번 저장되지 않았는지 체크 필요)\r\n// 요청은 2번간거고 응답만 마지막꺼 한개로 받음, 요청은 취소가 안됨\r\n// 만약 첫번째꺼만 하고 싶으면 takeLeading도 있음\r\nfunction* watchLoadPosts() {\r\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n        yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeEvery, throttle } from \"redux-saga/effects\";\nfunction logInAPI(data) {\n  //generate X\n  // 서버에 요청을 보내는 부분\n  return axios.post('/api/login', data);\n}\n\n// saga 명령어를 쓰는 이유 -> 테스트하기 좋음\nfunction* logIn(action) {\n  try {\n    // 함수, 매개변수들\n    //const result = yield call(logInAPI, action.data) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \n    // yield가 await과 비슷 blocking\n    // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\n\n    console.log(\"saga login\");\n    yield delay(1000);\n    yield put({\n      //put은 action을 dispatch\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  //generate X\n  return axios.post('/api/logout');\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \n    // yield가 await과 비슷 blocking\n    // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\n\n    yield delay(1000);\n    yield put({\n      //put은 action을 dispatch\n      type: LOG_OUT_SUCCESS\n      // data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\n//이벤트 리스너들 잔뜩 만들어줌\n// yield 특징 일회용임 -> 한번만 사용할 수 있음 -> 그래서 while 반복문을 활용함 -> 무한루프로 안빠짐 한번만 실행하기 때문\n// while 대신에 take는 동기적으로 동작, takeEvery는 비동기적으로 동작\nfunction* watchLogIn() {\n  // throttle -> 2초 안에 여러번해도 무응답, 2초 안에 한번만 적용 \n  yield throttle(LOG_IN_REQUEST, logIn, 2000); //take: LOG_IN액션이 실행될때까지 기다림\n}\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"names":["axios","all","delay","fork","put","takeEvery","throttle","logInAPI","data","post","logIn","action","console","log","type","LOG_IN_SUCCESS","err","LOG_IN_FAILURE","error","response","logOutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogIn","LOG_IN_REQUEST","watchLogOut","LOG_OUT_REQUEST","userSaga"],"sources":["C:/Users/user/Downloads/react-nodebird/front/sagas/user.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, fork, put, takeEvery, throttle } from \"redux-saga/effects\";\r\n\r\nfunction logInAPI(data) { //generate X\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\n// saga 명령어를 쓰는 이유 -> 테스트하기 좋음\r\nfunction* logIn(action) {\r\n    try {// 함수, 매개변수들\r\n        //const result = yield call(logInAPI, action.data) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \r\n        // yield가 await과 비슷 blocking\r\n        // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\r\n\r\n        console.log(\"saga login\");\r\n        yield delay(1000);\r\n        yield put({ //put은 action을 dispatch\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI() { //generate X\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI) // 요청의 결과값을 받음 fork는 비동기 함수 호출이고 call은 동기함수 호출임 \r\n        // yield가 await과 비슷 blocking\r\n        // 동기이기때문에 .then 처럼 결과값을 받을 때까지 기다려줌, 다음 메소드 실행안함\r\n\r\n        yield delay(1000);\r\n        yield put({ //put은 action을 dispatch\r\n            type: LOG_OUT_SUCCESS,\r\n            // data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n//이벤트 리스너들 잔뜩 만들어줌\r\n// yield 특징 일회용임 -> 한번만 사용할 수 있음 -> 그래서 while 반복문을 활용함 -> 무한루프로 안빠짐 한번만 실행하기 때문\r\n// while 대신에 take는 동기적으로 동작, takeEvery는 비동기적으로 동작\r\nfunction* watchLogIn() {\r\n    // throttle -> 2초 안에 여러번해도 무응답, 2초 안에 한번만 적용 \r\n    yield throttle(LOG_IN_REQUEST, logIn, 2000); //take: LOG_IN액션이 실행될때까지 기다림\r\n    \r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,GAAG,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,oBAAoB;AAE/E,SAASC,QAAQA,CAACC,IAAI,EAAE;EAAE;EACtB;EACA,OAAOR,KAAK,CAACS,IAAI,CAAC,YAAY,EAAED,IAAI,CAAC;AACzC;;AAEA;AACA,UAAUE,KAAKA,CAACC,MAAM,EAAE;EACpB,IAAI;IAAC;IACD;IACA;IACA;;IAEAC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB,MAAMX,KAAK,CAAC,IAAI,CAAC;IACjB,MAAME,GAAG,CAAC;MAAE;MACRU,IAAI,EAAEC,cAAc;MACpBP,IAAI,EAAEG,MAAM,CAACH;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACV,MAAMZ,GAAG,CAAC;MACNU,IAAI,EAAEG,cAAc;MACpBC,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACX;IACxB,CAAC,CAAC;EACN;AACJ;AAEA,SAASY,SAASA,CAAA,EAAG;EAAE;EACnB,OAAOpB,KAAK,CAACS,IAAI,CAAC,aAAa,CAAC;AACpC;AAEA,UAAUY,MAAMA,CAAA,EAAG;EACf,IAAI;IACA;IACA;IACA;;IAEA,MAAMnB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAME,GAAG,CAAC;MAAE;MACRU,IAAI,EAAEQ;MACN;IACJ,CAAC,CAAC;EACN,CAAC,CAAC,OAAON,GAAG,EAAE;IACV,MAAMZ,GAAG,CAAC;MACNU,IAAI,EAAES,eAAe;MACrBL,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACX;IACxB,CAAC,CAAC;EACN;AACJ;;AAEA;AACA;AACA;AACA,UAAUgB,UAAUA,CAAA,EAAG;EACnB;EACA,MAAMlB,QAAQ,CAACmB,cAAc,EAAEf,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AAEjD;AAEA,UAAUgB,WAAWA,CAAA,EAAG;EACpB,MAAMrB,SAAS,CAACsB,eAAe,EAAEN,MAAM,CAAC;AAC5C;AAEA,eAAe,UAAUO,QAAQA,CAAA,EAAG;EAChC,MAAM3B,GAAG,CAAC,CACNE,IAAI,CAACqB,UAAU,CAAC,EAChBrB,IAAI,CAACuB,WAAW,CAAC,CACpB,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module"}
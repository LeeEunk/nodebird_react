{"ast":null,"code":"//configureStore.js\nimport { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer from '../reducers';\n\n// 미들웨어는 항상 3단 고차함수임, action이 dispatch되어 로깅되는 함수\n// thunk는 항상 action이 함수인 경우 action은 원래 객체인데 thunk에서 함수임 => 지연함수이기에 나중에 실행해줄 수 있음\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  if (typeof action === 'function') {\n    return action(dispatch, getState, extraArgument);\n  }\n  return next(action);\n};\nconst configureStore = () => {\n  const middlewares = [thunkMiddleware, loggerMiddleware];\n  // redux middleware 붙이기\n  // 배포용\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  // 개발용\n  // const enhancer = process.env.NODE_ENV === 'production'\n  //     ? compose(applyMiddleware([]))\n  //     : composeWithDevTools(applyMiddleware([]))\n\n  // state와 reducer 포함하는 것을 store라고 함\n  const store = createStore(reducer, enhancer);\n  return store;\n};\nconst wrapper = createWrapper(configureStore, {\n  // 개발할때 debug를 true로 하면 더 자세하게 내용을 보여주니깐 변경하면 좋음\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","thunkMiddleware","reducer","loggerMiddleware","dispatch","getState","next","action","console","log","extraArgument","configureStore","middlewares","enhancer","store","wrapper","debug"],"sources":["C:/Users/user/Downloads/react-nodebird/front/store/configureStore.js"],"sourcesContent":["//configureStore.js\r\nimport { createWrapper } from 'next-redux-wrapper';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport reducer from '../reducers';\r\n\r\n// 미들웨어는 항상 3단 고차함수임, action이 dispatch되어 로깅되는 함수\r\n// thunk는 항상 action이 함수인 경우 action은 원래 객체인데 thunk에서 함수임 => 지연함수이기에 나중에 실행해줄 수 있음\r\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n    console.log(action);\r\n    if(typeof action === 'function') {\r\n        return action(dispatch, getState, extraArgument);\r\n    }\r\n    return next(action);\r\n}\r\n\r\n\r\nconst configureStore = () => {\r\n    const middlewares = [thunkMiddleware, loggerMiddleware];\r\n    // redux middleware 붙이기\r\n    // 배포용\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n        ? compose(applyMiddleware(...middlewares))\r\n        : composeWithDevTools(applyMiddleware(...middlewares))\r\n    // 개발용\r\n    // const enhancer = process.env.NODE_ENV === 'production'\r\n    //     ? compose(applyMiddleware([]))\r\n    //     : composeWithDevTools(applyMiddleware([]))\r\n\r\n    // state와 reducer 포함하는 것을 store라고 함\r\n    const store = createStore(reducer, enhancer);\r\n    return store;\r\n\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n    // 개발할때 debug를 true로 하면 더 자세하게 내용을 보여주니깐 변경하면 좋음\r\n    debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,oBAAoB;AAClD,SAASC,eAAe,EAAEC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAC7D,SAASC,mBAAmB,QAAQ,0BAA0B;AAE9D,OAAOC,eAAe,MAAM,aAAa;AAEzC,OAAOC,OAAO,MAAM,aAAa;;AAEjC;AACA;AACA,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAMC,IAAI,IAAMC,MAAM,IAAK;EACvEC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACnB,IAAG,OAAOA,MAAM,KAAK,UAAU,EAAE;IAC7B,OAAOA,MAAM,CAACH,QAAQ,EAAEC,QAAQ,EAAEK,aAAa,CAAC;EACpD;EACA,OAAOJ,IAAI,CAACC,MAAM,CAAC;AACvB,CAAC;AAGD,MAAMI,cAAc,GAAGA,CAAA,KAAM;EACzB,MAAMC,WAAW,GAAG,CAACX,eAAe,EAAEE,gBAAgB,CAAC;EACvD;EACA;EACA,MAAMU,QAAQ,GAAG,QACXf,OAAO,CAACD,eAAe,CAAC,GAAGe,WAAW,CAAC,CAAC,GACxCZ,mBAAmB,CAACH,eAAe,CAAC,GAAGe,WAAW,CAAC,CAAC;EAC1D;EACA;EACA;EACA;;EAEA;EACA,MAAME,KAAK,GAAGf,WAAW,CAACG,OAAO,EAAEW,QAAQ,CAAC;EAC5C,OAAOC,KAAK;AAEhB,CAAC;AAED,MAAMC,OAAO,GAAGnB,aAAa,CAACe,cAAc,EAAE;EAC1C;EACAK,KAAK;AACT,CAAC,CAAC;AAEF,eAAeD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}
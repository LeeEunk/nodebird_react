{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\react-nodebird\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Avatar, Button, Card, Popover, List } from 'antd';\nimport { EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport PostImages from './PostImages';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false);\n  cosnt[commentFormOpened, setCommentOpened] = useState(false);\n  const id = useSelector(state => {\n    var _state$user$me;\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  // optional chaining , me가 있으면 id를 출력 없으면 undefined로 출력\n  // const id = me ?.id; \n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 34\n      }, this)\n      // 배열 안에 jsx를 넣어줄 땐 늘 key를 붙여줘야 함\n      ,\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(HeartOutlined, {}, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {}, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              type: \"primary\",\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 20\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)],\n      children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 19\n        }, this),\n        title: post.User.nickname,\n        description: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"names":["React","useState","PropTypes","useSelector","useDispatch","Avatar","Button","Card","Popover","List","EllipsisOutlined","HeartOutlined","MessageOutlined","RetweetOutlined","PostImages","jsxDEV","_jsxDEV","Fragment","_Fragment","PostCard","post","liked","setLiked","cosnt","commentFormOpened","setCommentOpened","id","state","_state$user$me","user","me","style","marginBottom","children","cover","Images","images","fileName","_jsxFileName","lineNumber","columnNumber","actions","content","Group","User","type","Meta","avatar","nickname","title","description","propTypes","shape","number","object","string","createdAt","Comments","arrayOf","isRequired"],"sources":["C:/Users/user/Downloads/react-nodebird/front/components/PostCard.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Avatar, Button, Card, Popover, List } from 'antd';\r\nimport { EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons'\r\nimport PostImages from './PostImages';\r\n\r\n\r\nconst PostCard = ({ post }) => {\r\n\r\n  const [liked, setLiked] = useState(false);\r\n  cosnt [commentFormOpened, setCommentOpened] = useState(false);\r\n\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  // optional chaining , me가 있으면 id를 출력 없으면 undefined로 출력\r\n  // const id = me ?.id; \r\n  return (\r\n    <div style={{ marginBottom: 20 }}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        // 배열 안에 jsx를 넣어줄 땐 늘 key를 붙여줘야 함\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" />,\r\n          <HeartOutlined key=\"heart\"/>,\r\n          <MessageOutlined key=\"comment\"/>,\r\n          <Popover key=\"more\" content={(\r\n            <Button.Group>\r\n              {/* 게시자와 게시물 작성자의 id가 나와 같으면 수정 삭제가 가능*/}\r\n              {id && post.User.id === id ? (\r\n              <>\r\n                <Button type='primary'>수정</Button>\r\n                <Button type='danger'>삭제</Button>\r\n              </>\r\n              ) :  <Button>신고</Button> }\r\n            </Button.Group>\r\n          )}>\r\n            <EllipsisOutlined />\r\n          </Popover>\r\n        ]}\r\n      >\r\n        <Card.Meta \r\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n          title={post.User.nickname}\r\n          description={post.content}\r\n        />\r\n      </Card>\r\n      {/* <CommentForm />\r\n      <Comments /> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.object,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}